fakedat<-rnorm(10,mean=50,sd=10)
xbar<-mean(fakedat)
## our data:
n<-10
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(10,mean=50,sd=10)
xbar<-mean(fakedat)
fakedat<-rnorm(n,mean=50,sd=10)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
lower<-xbar-2*se
upper <- xbar+2*se
lf_posterior<-rep(NA,nsamp)
## Rejection sampling:
nsamp<-100
## generate random starting value for lf:
latency_factor <<- runif(1,min = 0.1,max=0.5)
lf_posterior<-rep(NA,nsamp)
lower <- xbar-se
upper <- xbar+se
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
lower
upper
xbar
## set acceptable bounds of generated effect:
lower <- xbar-se/10
upper <- xbar+se/10
lower
upper
## Rejection sampling:
nsamp<-100
## generate random starting value for lf:
latency_factor <<- runif(1,min = 0.1,max=0.5)
lf_posterior<-rep(NA,nsamp)
for(i in 2:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## get generated effect:
generated_effect-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within 1/10th of SE, accept
if(generated_effect>=lower & generated_effect<=higher){
lf_posterior[i]<-latency_factor
} else {
## reject
lf_posterior[i]<- -1
}
}
## Rejection sampling:
nsamp<-100
lf_posterior<-rep(NA,nsamp)
for(i in 2:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within 1/10th of SE, accept
if(generated_effect>=lower & generated_effect<=higher){
lf_posterior[i]<-latency_factor
} else {
## reject
lf_posterior[i]<- -1
}
}
nsamp<-100
lf_posterior<-rep(NA,nsamp)
for(i in 2:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within 1/10th of SE, accept
if(generated_effect>=lower & generated_effect<=upper){
lf_posterior[i]<-latency_factor
} else {
## reject
lf_posterior[i]<- -1
}
}
lf_posterior
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
## Rejection sampling:
nsamp<-100
lf_posterior<-rep(NA,nsamp)
for(i in 2:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
lf_posterior[i]<-latency_factor
} else {
## reject
lf_posterior[i]<- -1
}
}
lf_posterior
which(lf_posterior==-1)
## Rejection sampling:
nsamp<-100
lf_posterior<-rep(NA,nsamp)
for(i in 1:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
lf_posterior[i]<-latency_factor
} else {
## reject
lf_posterior[i]<- -1
}
}
## very high rejection rate:
rejected<-which(lf_posterior==-1)
lf_posterior[-rejected]/nsamp
length(lf_posterior[-rejected])/nsamp
hist(lf_posterior[-rejected])
## Rejection sampling:
nsamp<-1000
lf_posterior<-cuewt<-rep(NA,nsamp)
for(i in 1:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## generate random value for cue-weighting between 1 and 4:
cueweighting <<- runif(1,min=1,max=4)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
lf_posterior[i]<-latency_factor
cuewt[i]<-cueweighting
} else {
## reject
lf_posterior[i]<- -1
}
}
## very low acceptance rate:
rejected<-which(lf_posterior==-1)
length(lf_posterior[-rejected])/nsamp
## posterior:
hist(cueweighting[-rejected])
rejected<-which(cueweighting==-1)
length(cueweighting[-rejected])/nsamp
## posterior:
hist(cueweighting[-rejected])
## Rejection sampling:
nsamp<-10000
## Rejection sampling:
nsamp<-1000
lf_posterior<-cuewt<-rep(NA,nsamp)
for(i in 1:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## generate random value for cue-weighting between 1 and 4:
cueweighting <<- runif(1,min=1,max=2)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
lf_posterior[i]<-latency_factor
cuewt[i]<-cueweighting
} else {
## reject
lf_posterior[i]<- -1
}
}
## very low acceptance rate:
rejected<-which(lf_posterior==-1)
length(lf_posterior[-rejected])/nsamp
## posterior:
hist(cueweighting[-rejected])
## posterior:
hist(lf_posterior[-rejected])
rejected<-which(cueweighting==-1)
length(cueweighting[-rejected])/nsamp
## posterior:
hist(cueweighting[-rejected])
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=10,sd=5)
xbar<-mean(fakedat)
xbar
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
lower
upper
## Rejection sampling:
nsamp<-1000
lf_posterior<-cuewt<-rep(NA,nsamp)
for(i in 1:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## generate random value for cue-weighting between 1 and 4:
#cueweighting <<- runif(1,min=1,max=2)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
lf_posterior[i]<-latency_factor
#cuewt[i]<-cueweighting
} else {
## reject
lf_posterior[i]<- -1
}
}
## very low acceptance rate:
rejected<-which(lf_posterior==-1)
length(lf_posterior[-rejected])/nsamp
## posterior:
hist(lf_posterior[-rejected])
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=5,sd=5)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
## Rejection sampling:
nsamp<-10000
lf_posterior<-cuewt<-rep(NA,nsamp)
for(i in 1:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## generate random value for cue-weighting between 1 and 4:
#cueweighting <<- runif(1,min=1,max=2)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
lf_posterior[i]<-latency_factor
#cuewt[i]<-cueweighting
} else {
## reject
lf_posterior[i]<- -1
}
}
## very low acceptance rate:
rejected<-which(lf_posterior==-1)
length(lf_posterior[-rejected])/nsamp
## posterior:
hist(lf_posterior[-rejected])
nsamp
quantile(lf_posterior,probs=c(0.025,0.975))
quantile(lf_posterior[-rejected],probs=c(0.025,0.975))
mean(lf_posterior[-rejected])
lower
upper
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=80,sd=10)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
lower
upper
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=80,sd=10)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
## Rejection sampling:
nsamp<-1000
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=80,sd=10)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
## Rejection sampling:
nsamp<-1000
lf_posterior<-rep(NA,nsamp)
for(i in 1:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
lf_posterior[i]<-latency_factor
} else {
## reject
lf_posterior[i]<- -1
}
}
## very low acceptance rate:
rejected<-which(lf_posterior==-1)
length(lf_posterior[-rejected])/nsamp
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=80,sd=10)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
lower
upper
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=50,sd=10)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
lower
upper
## Rejection sampling:
nsamp<-1000
lf_posterior<-rep(NA,nsamp)
for(i in 1:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
lf_posterior[i]<-latency_factor
} else {
## reject
lf_posterior[i]<- -1
}
}
## very low acceptance rate:
rejected<-which(lf_posterior==-1)
length(lf_posterior[-rejected])/nsamp
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=30,sd=10)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
lower
upper
## Rejection sampling:
nsamp<-1000
lf_posterior<-rep(NA,nsamp)
for(i in 1:nsamp){
## generate *random* latency factor value each time? Not sure
latency_factor <<- runif(1,min = 0.1,max=0.5)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
lf_posterior[i]<-latency_factor
} else {
## reject
lf_posterior[i]<- -1
}
}
## very low acceptance rate:
rejected<-which(lf_posterior==-1)
length(lf_posterior[-rejected])/nsamp
quantile(lf_posterior[-rejected],probs=c(0.025,0.975))
mean(lf_posterior[-rejected])
## posterior:
hist(lf_posterior[-rejected])
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=5,sd=5)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
## fixed
latency_factor<<-0.13
cuewt <- rep(NA,nsamp)
## Rejection sampling:
nsamp<-1000
## fixed
latency_factor<<-0.13
cuewt <- rep(NA,nsamp)
for(i in 1:nsamp){
## generate *random* cue-weighting value
cueweighting <<- runif(1,min = 1,max=4)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
cuewt[i]<-cueweighting
} else {
## reject
cuewt[i]<- -1
}
}
## very low acceptance rate:
rejected<-which(cuewt==-1)
length(cuewt[-rejected])/nsamp
quantile(cuewt[-rejected],probs=c(0.025,0.975))
mean(cuewt[-rejected])
## our data from one subject in one pair of conditions (difference in means):
n<-10
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=30,sd=10)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
lower
upper
## Rejection sampling:
nsamp<-1000
## fixed
latency_factor<<-0.40
cuewt <- rep(NA,nsamp)
for(i in 1:nsamp){
## generate *random* cue-weighting value
cueweighting <<- runif(1,min = 1,max=4)
## get generated effect:
generated_effect<-iterate_lf(latency_factor)$Effect[1]
## if generated effect is within bounds, accept
if(generated_effect>=lower & generated_effect<=upper){
cuewt[i]<-cueweighting
} else {
## reject
cuewt[i]<- -1
}
}
## very low acceptance rate:
rejected<-which(cuewt==-1)
length(cuewt[-rejected])/nsamp
quantile(cuewt[-rejected],probs=c(0.025,0.975))
mean(cuewt[-rejected])
## our data from one subject in one pair of conditions (difference in means):
n<-10
fakedat<-rnorm(n,mean=5,sd=5)
xbar<-mean(fakedat)
se<-sd(fakedat)/sqrt(length(n))
## set acceptable bounds of generated effect:
lower <- xbar-se
upper <- xbar+se
## set some initial values:
latency_factor <<- runif(1,min = 0.1,max=0.5)
cueweighting <<- runif(1,min=1,max=4)
nsamp<-1000
## set some initial values:
latency_factor <<- runif(1,min = 0.1,max=0.5)
cueweighting <<- 1 ## default
## store posterior samples:
lf_posterior<-cuewt<-rep(NA,nsamp)
## set the random values for first step:
lf_posterior[1]<-latency_factor
cuewt[1]<-cueweighting
for(i in 2:nsamp){
## get generated effect using i-1th step's values
## for lf and cueweighing:
generated_effect1<-iterate_lf(latency_factor)$Effect[1]
## if generated effect1 is within bounds, first accept lf
if(generated_effect1>=lower & generated_effect1<=upper){
## store accepted value of lf in current step:
lf_posterior[i]<-latency_factor
## set this lf value as the new global latency factor value
## for the next step in the iteration:
latency_factor <<- lf_posterior[i]
## take sample of cueweighting from prior:
cueweighting <<- runif(1,min=1,max=4)
## take another sample with the new global lf value in current step
## in the iteration:
generated_effect2<-iterate_lf(latency_factor)$Effect[1]
## if generated value is within bounds:
if(generated_effect2>=lower & generated_effect2<=upper){
## update cue weight to the currently sampled one:
cuewt[i] <<- cueweighting
## reset cue weight for next step in the iteration:
cueweighting <<- cuewt[i]
} else {
## mark current cueweighting as rejected
cuewt[i]<- -1
}
}
else {
## mark lf as rejected
lf_posterior[i]<- -1
}
}
summary(lf_posterior)
rejected<-which(lf_posterior==-1)
length(lf_posterior[-rejected])/nsamp
quantile(lf_posterior[-rejected],probs=c(0.025,0.975))
mean(lf_posterior[-rejected])
length(lf_posterior[-rejected])
rejected<-which(cuewt==-1)
rejected
cuewt
table(lf_posterior
)
q()
